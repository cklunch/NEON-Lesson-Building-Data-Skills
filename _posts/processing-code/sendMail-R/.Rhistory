library(rnoaa)
install.packages("rnoaa")
options(noaakey = "PsvdwdgNtQaAKtRuZPRIUajRIgqDjJdq")
noaa_locs(locationcategoryid = "CITY", sortfield = "name", sortorder = "desc",
limit = 5)
library(rnoaa)
noaa_locs(locationcategoryid = "CITY", sortfield = "name", sortorder = "desc",
limit = 5)
ncdc_locs(locationcategoryid = "CITY", sortfield = "name", sortorder = "desc",
limit = 5)
ncdc_locs(locationcategoryid = "CITY", sortfield = "name", sortorder = "desc",
limit = 5)
ncdc_locs(locationcategoryid = "CITY", sortfield = "name", sortorder = "desc",
limit = 5)
ncdc_stations(datasetid = "GHCND", stationid = "GHCND:US1COBO0072")
out <- ncdc(datasetid = "GHCND", stationid = "GHCND:US1COBO0072",
datatypeid = "PRCP",
startdate = "2010-05-01", enddate = "2010-10-31")
out
library("EML")
eml_HARV <- read_eml("https://github.com/NEONInc/neon-eml/blob/master/neon_eml_components/NEON_EML_Boilerplate.xml")
eml_NEON <- read_eml("~/Documents/Github/neon-eml/neon_eml_components/NEON_EML_Boilerplate.xml")
eml_NEON <- read_eml("~/Documents/Github/neon-eml/neon_eml_components/NEON_EML_Boilerplate.xml")
eml_HARV <- read_eml("http://harvardforest.fas.harvard.edu/data/eml/hf001.xml")
class(eml_HARV)
XCoord <- eml_HARV@dataset@coverage@geographicCoverage@boundingCoordinates@westBoundingCoordinate
eml_HARV@dataset@dataTable[[1]]
eml_HARV@dataset@contact
eml_HARV@dataset@contact@.Data
eml_HARV@dataset@contact
get_attributes(eml_HARV@dataset@dataTable[[3]]@attributeList, join = TRUE)
eml_HARV@dataset@contact
eml_HARV@dataset@publisher
get_attributes(eml_HARV@dataset@dataTable[[3]]@attributeList, join = TRUE)
get_attributes(eml_HARV@dataset@dataTable[[1]]@attributeList, join = TRUE)
get_attributes(eml_HARV@dataset@schemaLocation[[1]]@attributeList, join = TRUE)
get_attributes(eml_HARV@dataset@schemaLocation@attributeList, join = TRUE)
get_attributes(eml_HARV@dataset@schemaLocation, join = TRUE)
get_attributes(eml_HARV@dataset@schemaLocation[[1]], join = TRUE)
get_attributes(eml_HARV@dataset@schemaLocation@.Data, join = TRUE)
eml_NEON <- read_eml("~/Documents/Github/neon-eml/neon_eml_components/NEON_EML_Boilerplate.xml")
eml_validate("~/Documents/Github/neon-eml/neon_eml_components/NEON_EML_Boilerplate.xml")
library("EML")
eml_validate("~/Documents/Github/neon-eml/neon_eml_components/NEON_EML_Boilerplate.xml")
eml_validate("https://github.com/lwasser/testRep/blob/master/NEON_EML_Boilerplate.xml")
eml_NEON <- read_eml("~/Documents/Github/neon-eml/neon_eml_components/NEON_EML_Boilerplate.xml")
eml_validate("~/Documents/Github/neon-eml/neon_eml_components/NEON_EML_Boilerplate.xml")
eml_HARV <- read_eml("https://github.com/NEONInc/neon-eml/blob/master/neon_eml_components/NEON_EML_Boilerplate.xml")
eml_HARV <- read_eml("http://harvardforest.fas.harvard.edu/data/eml/hf001.xml")
repo.name = 3
repo.path <- c("~/Documents/GitHub/NEON-R-Spatial-Vector/",
"~/Documents/GitHub/NEON-R-Spatial-Raster/",
"~/Documents/GitHub/NEON-R-Tabular-Time-Series/")
repo.subdir <- c("/dc-spatial-vector/",
"/dc-spatial-raster/",
"/dc-tabular-time-series/")
basePath <- repo.path[repo.name]
repoSubDir <- repo.subdir[repo.name]
# DEFINE PATH to Move Files To
prodPath <-"~/Documents/GitHub/NEON-Data-Skills-Development/"
if (dir.exists(paste0(prodPath,"_posts/R", repoSubDir))){
# copy image directory over
print("wer")
}
unlink(paste0(prodPath,"_posts/R", repoSubDir), recursive = FALSE)
unlink(paste0(prodPath,"images/rfigs/R", repoSubDir), recursive = TRUE)
paste0(prodPath,"images/rfigs/R", repoSubDir)
unlink(paste0(prodPath,"images/rfigs", repoSubDir), recursive = TRUE)
unlink(paste0(prodPath,"_posts/R", repoSubDir), recursive = FALSE)
paste0(prodPath,"_posts/R", repoSubDir)
unlink(paste0(prodPath,"images", repoSubDir), recursive = FALSE)
paste0(prodPath,"images", repoSubDir)
unlink(~/Documents/GitHub/NEON-Data-Skills-Development/images/dc-tabular-time-series)
unlink("~/Documents/GitHub/NEON-Data-Skills-Development/images/dc-tabular-time-series")
repo.subdir <- c("/dc-spatial-vector",
"/dc-spatial-raster",
"/dc-tabular-time-series")
basePath <- repo.path[repo.name]
repoSubDir <- repo.subdir[repo.name]
prodPath <-"~/Documents/GitHub/NEON-Data-Skills-Development/"
unlink(paste0(prodPath,"_posts/R", repoSubDir), recursive = FALSE)
paste0(prodPath,"_posts/R", repoSubDir)
file.copy(paste0(basePath,"images/rfigs/R", repoSubDir), prodPath, recursive=TRUE)
paste0(basePath,"_posts/R", repoSubDir)
file.copy(paste0(basePath,"_posts/R", repoSubDir), prodPath, recursive=TRUE)
unlink(paste0(prodPath,"_posts/R", repoSubDir), recursive = FALSE)
unlink(paste0(prodPath,"images/rfigs", repoSubDir), recursive = TRUE)
file.copy(paste0(basePath,"images/rfigs/R", repoSubDir), prodPath, recursive=TRUE)
paste0(basePath,"images/rfigs/R", repoSubDir)
file.copy(paste0(basePath,"images/rfigs/R", repoSubDir), prodPath, recursive=TRUE)
prodPath
file.copy(paste0(basePath,"images/rfigs", repoSubDir), prodPath, recursive=TRUE)
file.copy(paste0(basePath,"_posts/R", repoSubDir),
(paste0(prodPath,"_posts/R", repoSubDir)),
recursive=TRUE)
paste0(prodPath,"_posts/R", repoSubDir)
file.copy(paste0(basePath,"_posts/R", repoSubDir),
(paste0(prodPath,"_posts/R", repoSubDir)),
recursive=FALSE)
file.copy(paste0(basePath,"_posts/R", repoSubDir),
(paste0(prodPath,"_posts/R", repoSubDir)),
recursive=FALSE)
file.copy(paste0(basePath,"_posts/R", repoSubDir),
(paste0(prodPath,"_posts/R", repoSubDir)),
recursive=TRUE)
repoSubDir
file.copy(paste0(basePath,"_posts/R", repoSubDir),
(paste0(prodPath,"_posts/R")),
recursive=TRUE)
unlink(paste0(prodPath,"_posts/R", repoSubDir), recursive = FALSE)
paste0(prodPath,"_posts/R", repoSubDir
)
unlink("~/Documents/GitHub/NEON-Data-Skills-Development/_posts/R/dc-tabular-time-series/")
unlink("~/Documents/GitHub/NEON-Data-Skills-Development/_posts/R/dc-tabular-time-series")
file.copy(paste0(basePath,"images/rfigs", repoSubDir),
(paste0(prodPath,"images/rfigs")),
recursive=TRUE)
unlink(paste0(prodPath,"images/rfigs", repoSubDir), recursive = TRUE)
file.copy(paste0(basePath,"images", repoSubDir),
(paste0(prodPath,"images")),
recursive=TRUE)
unlink(paste0(prodPath,"images", repoSubDir), recursive = FALSE)
unlink(paste0(prodPath,"images", repoSubDir), recursive = TRUE)
h
h
h
file.copy(paste0(basePath,"images/rfigs", repoSubDir),
(paste0(prodPath,"images/rfigs")),
recursive=TRUE)
file.copy(paste0(basePath,"images", repoSubDir),
(paste0(prodPath,"images")),
recursive=TRUE)
unlink(paste0(prodPath,"images", repoSubDir), recursive = TRUE)
??unlink
unlink(paste0(prodPath,"code/R", repoSubDir), recursive = FALSE)
unlink(paste0(prodPath,"code/R", repoSubDir), recursive = TRUE)
file.copy(paste0(basePath,"code/R", repoSubDir), prodPath, recursive=TRUE)
file.copy(paste0(basePath,"code/R",
paste0(repoSubDir,"code/R")), prodPath, recursive=TRUE)
file.copy(paste0(basePath,"code/R", repoSubDir),
paste0(prodPath,"code/R"),
recursive=TRUE)
unlink(paste0(prodPath,"code/R", repoSubDir), recursive = TRUE)
unlink(paste0(prodPath,"_posts/R", repoSubDir), recursive = FALSE)
unlink(paste0(prodPath,"_posts/R", repoSubDir), recursive = TRUE)
file.copy(paste0(basePath,"_posts/R", repoSubDir),
(paste0(prodPath,"_posts/R")),
recursive=TRUE)
file.copy(paste0(basePath,"images/rfigs", repoSubDir),
(paste0(prodPath,"images/rfigs")),
recursive=TRUE)
file.copy(paste0(basePath,"images", repoSubDir),
(paste0(prodPath,"images")),
recursive=TRUE)
file.copy(paste0(basePath,"code/R", repoSubDir),
paste0(prodPath,"code/R"),
recursive=TRUE)
rmd.files <- list.files(basePath, pattern="*.Rmd", full.names = TRUE )
file.copy(rmd.files, paste0(prodPath, "_posts/R", repoSubDir))
########## MOVE FILES TO DEV AND THEN PRODUCTION SERVER ############
# This code is tailored to moving posts from the data-lessons repos to the
# dev or prod server. it does the following
# 1. it moves all RMD files to _posts/ whatever the sub dir is in the repo
# 2. it moves all code files to the code dir
# 3. it moves all md files from the data-lessons posts dir to the same location in the prod repo
# NOTE -- i should edit this to be more precise in what directories it copies over!!
# lists of paths may be important.
# Created by: Leah A. Wasser
# Last Modified - 10 Mar 2016
######################################################################
# Which repo do you want to move
# 1 = vector, 2 = dc raster, 3 = dc time series
# adjust the variable below to define what repo you want to move
repo.name = 3
##### Define Repo paths
repo.path <- c("~/Documents/GitHub/NEON-R-Spatial-Vector/",
"~/Documents/GitHub/NEON-R-Spatial-Raster/",
"~/Documents/GitHub/NEON-R-Tabular-Time-Series/")
##### Define repo subdir names
# note, we could do a "contains" statmtne to find a dir with "vector" but i think
# that is too risky. i'd rather be precise and hard code paths in this instance.
repo.subdir <- c("/dc-spatial-vector",
"/dc-spatial-raster",
"/dc-tabular-time-series")
# Define Base Path
basePath <- repo.path[repo.name]
repoSubDir <- repo.subdir[repo.name]
# DEFINE PATH to Move Files To
prodPath <-"~/Documents/GitHub/NEON-Data-Skills-Development/"
# prodPath <-"~/Documents/GitHub/NEON-Data-Skills/"
############################## Begin Move Files #########################
# get subdir in _posts
# NOTE: this assumes there is only one set of posts in the post directory that is
# relevant
# postSubDir <- list.dirs(paste0(basePath,"_posts"), recursive=TRUE, full.names = FALSE)
# grab the full path of the subdir in the repo - this is not operational code but
# it works as a hack for now
#length(postSubDir)
#subDirPath <- postSubDir[length(postSubDir)]
########### PROCEED WITH CAUTION ##########
########### Clean out directories (to avoid duplication of content) ###########
if (dir.exists(paste0(prodPath,"_posts/R", repoSubDir))){
# copy image directory over
print("It Exists!")
}
# clean out production posts - DOESN"T WORK
unlink(paste0(prodPath,"_posts/R", repoSubDir), recursive = TRUE)
# clean out production rfigs
unlink(paste0(prodPath,"images/rfigs", repoSubDir), recursive = TRUE)
# clean up images dir
unlink(paste0(prodPath,"images", repoSubDir), recursive = TRUE)
# clean up code dir
unlink(paste0(prodPath,"code/R", repoSubDir), recursive = TRUE)
########################## COPY Code files, md and images to prod #############
# i probably could create some sort of function to make this code simpler
# copy _posts file to the rmd directory on git
file.copy(paste0(basePath,"_posts/R", repoSubDir),
(paste0(prodPath,"_posts/R")),
recursive=TRUE)
# copy knitr produced images dir same dir location on prod
file.copy(paste0(basePath,"images/rfigs", repoSubDir),
(paste0(prodPath,"images/rfigs")),
recursive=TRUE)
# copy other images produced for repo over - Works
file.copy(paste0(basePath,"images", repoSubDir),
(paste0(prodPath,"images")),
recursive=TRUE)
# copy R code over to prod
file.copy(paste0(basePath,"code/R", repoSubDir),
paste0(prodPath,"code/R"),
recursive=TRUE)
# grab all rmd files and copy to posts/R/ directory
rmd.files <- list.files(basePath, pattern="*.Rmd", full.names = TRUE )
file.copy(rmd.files, paste0(prodPath, "_posts/R", repoSubDir))
########## MOVE FILES TO DEV AND THEN PRODUCTION SERVER ############
# This code is tailored to moving posts from the data-lessons repos to the
# dev or prod server. it does the following
# 1. it moves all RMD files to _posts/ whatever the sub dir is in the repo
# 2. it moves all code files to the code dir
# 3. it moves all md files from the data-lessons posts dir to the same location in the prod repo
# NOTE -- i should edit this to be more precise in what directories it copies over!!
# lists of paths may be important.
# Created by: Leah A. Wasser
# Last Modified - 10 Mar 2016  -
# Last additions -- cleanup of all directories before copying new ones over.
# cleanup is specific to EACH REPOSITORY.
######################################################################
# Which repo do you want to move
# 1 = vector, 2 = dc raster, 3 = dc time series
# adjust the variable below to define what repo you want to move
repo.name = 1
# DEFINE PATH to Move Files To
# prodPath <-"~/Documents/GitHub/NEON-Data-Skills-Development/"
prodPath <-"~/Documents/GitHub/NEON-Data-Skills/"
####################### Edit Below If Paths Change ############################
##### Define Repo paths
repo.path <- c("~/Documents/GitHub/NEON-R-Spatial-Vector/",
"~/Documents/GitHub/NEON-R-Spatial-Raster/",
"~/Documents/GitHub/NEON-R-Tabular-Time-Series/")
##### Define repo subdir names
# note, we could do a "contains" statmtne to find a dir with "vector" but i think
# that is too risky. i'd rather be precise and hard code paths in this instance.
repo.subdir <- c("/dc-spatial-vector",
"/dc-spatial-raster",
"/dc-tabular-time-series")
# Define Base Path
basePath <- repo.path[repo.name]
repoSubDir <- repo.subdir[repo.name]
############################## Begin Move Files #########################
# get subdir in _posts
# NOTE: this assumes there is only one set of posts in the post directory that is
# relevant
# postSubDir <- list.dirs(paste0(basePath,"_posts"), recursive=TRUE, full.names = FALSE)
# grab the full path of the subdir in the repo - this is not operational code but
# it works as a hack for now
#length(postSubDir)
#subDirPath <- postSubDir[length(postSubDir)]
########### PROCEED WITH CAUTION ##########
########### Clean out directories (to avoid duplication of content) ###########
if (dir.exists(paste0(prodPath,"_posts/R", repoSubDir))){
# copy image directory over
print("It Exists!")
}
# clean out production posts - DOESN"T WORK
unlink(paste0(prodPath,"_posts/R", repoSubDir), recursive = TRUE)
# clean out production rfigs
unlink(paste0(prodPath,"images/rfigs", repoSubDir), recursive = TRUE)
# clean up images dir
unlink(paste0(prodPath,"images", repoSubDir), recursive = TRUE)
# clean up code dir
unlink(paste0(prodPath,"code/R", repoSubDir), recursive = TRUE)
########################## COPY Code files, md and images to prod #############
# i probably could create some sort of function to make this code simpler
# copy _posts file to the rmd directory on git
file.copy(paste0(basePath,"_posts/R", repoSubDir),
(paste0(prodPath,"_posts/R")),
recursive=TRUE)
# copy knitr produced images dir same dir location on prod
file.copy(paste0(basePath,"images/rfigs", repoSubDir),
(paste0(prodPath,"images/rfigs")),
recursive=TRUE)
# copy other images produced for repo over - Works
file.copy(paste0(basePath,"images", repoSubDir),
(paste0(prodPath,"images")),
recursive=TRUE)
# copy R code over to prod
file.copy(paste0(basePath,"code/R", repoSubDir),
paste0(prodPath,"code/R"),
recursive=TRUE)
# grab all rmd files and copy to posts/R/ directory
rmd.files <- list.files(basePath, pattern="*.Rmd", full.names = TRUE )
file.copy(rmd.files, paste0(prodPath, "_posts/R", repoSubDir))
########## MOVE FILES TO DEV AND THEN PRODUCTION SERVER ############
# This code is tailored to moving posts from the data-lessons repos to the
# dev or prod server. it does the following
# 1. it moves all RMD files to _posts/ whatever the sub dir is in the repo
# 2. it moves all code files to the code dir
# 3. it moves all md files from the data-lessons posts dir to the same location in the prod repo
# NOTE -- i should edit this to be more precise in what directories it copies over!!
# lists of paths may be important.
# Created by: Leah A. Wasser
# Last Modified - 10 Mar 2016  -
# Last additions -- cleanup of all directories before copying new ones over.
# cleanup is specific to EACH REPOSITORY.
######################################################################
# Which repo do you want to move
# 1 = vector, 2 = dc raster, 3 = dc time series
# adjust the variable below to define what repo you want to move
repo.name = 2
# DEFINE PATH to Move Files To
# prodPath <-"~/Documents/GitHub/NEON-Data-Skills-Development/"
prodPath <-"~/Documents/GitHub/NEON-Data-Skills/"
####################### Edit Below If Paths Change ############################
##### Define Repo paths
repo.path <- c("~/Documents/GitHub/NEON-R-Spatial-Vector/",
"~/Documents/GitHub/NEON-R-Spatial-Raster/",
"~/Documents/GitHub/NEON-R-Tabular-Time-Series/")
##### Define repo subdir names
# note, we could do a "contains" statmtne to find a dir with "vector" but i think
# that is too risky. i'd rather be precise and hard code paths in this instance.
repo.subdir <- c("/dc-spatial-vector",
"/dc-spatial-raster",
"/dc-tabular-time-series")
# Define Base Path
basePath <- repo.path[repo.name]
repoSubDir <- repo.subdir[repo.name]
############################## Begin Move Files #########################
# get subdir in _posts
# NOTE: this assumes there is only one set of posts in the post directory that is
# relevant
# postSubDir <- list.dirs(paste0(basePath,"_posts"), recursive=TRUE, full.names = FALSE)
# grab the full path of the subdir in the repo - this is not operational code but
# it works as a hack for now
#length(postSubDir)
#subDirPath <- postSubDir[length(postSubDir)]
########### PROCEED WITH CAUTION ##########
########### Clean out directories (to avoid duplication of content) ###########
if (dir.exists(paste0(prodPath,"_posts/R", repoSubDir))){
# copy image directory over
print("It Exists!")
}
# clean out production posts - DOESN"T WORK
unlink(paste0(prodPath,"_posts/R", repoSubDir), recursive = TRUE)
# clean out production rfigs
unlink(paste0(prodPath,"images/rfigs", repoSubDir), recursive = TRUE)
# clean up images dir
unlink(paste0(prodPath,"images", repoSubDir), recursive = TRUE)
# clean up code dir
unlink(paste0(prodPath,"code/R", repoSubDir), recursive = TRUE)
########################## COPY Code files, md and images to prod #############
# i probably could create some sort of function to make this code simpler
# copy _posts file to the rmd directory on git
file.copy(paste0(basePath,"_posts/R", repoSubDir),
(paste0(prodPath,"_posts/R")),
recursive=TRUE)
# copy knitr produced images dir same dir location on prod
file.copy(paste0(basePath,"images/rfigs", repoSubDir),
(paste0(prodPath,"images/rfigs")),
recursive=TRUE)
# copy other images produced for repo over - Works
file.copy(paste0(basePath,"images", repoSubDir),
(paste0(prodPath,"images")),
recursive=TRUE)
# copy R code over to prod
file.copy(paste0(basePath,"code/R", repoSubDir),
paste0(prodPath,"code/R"),
recursive=TRUE)
# grab all rmd files and copy to posts/R/ directory
rmd.files <- list.files(basePath, pattern="*.Rmd", full.names = TRUE )
file.copy(rmd.files, paste0(prodPath, "_posts/R", repoSubDir))
?ggetData
library(raster)
??getData
library(raster)
library(rgdal)
getwd()
suppressPackageStartupMessages(library(gmailr))
gmail_auth("data-institute-email.json", scope = 'compose')
setwd("~/Documents/GitHub/NEON-Lesson-Building-Data-Skills/_posts/processing-code/sendMail-R")
gmail_auth("data-institute-email.json", scope = 'compose')
library(devtools)
install_github("jimhester/gmailr")
suppressPackageStartupMessages(library(gmailr))
gmail_auth("data-institute-email.json", scope = 'compose')
install.packages(gmailr)
install.packages("gmailr")
install.packages("gmailr")
suppressPackageStartupMessages(library(gmailr))
gmail_auth("data-institute-email.json", scope = 'compose')
gmail_auth("data-institute-email.json", scope = 'compose')
install_github("jimhester/gmailr")
library(devtools)
install_github("jimhester/gmailr")
test_email <- mime(
To = "lwasser@neoninc.org",
From = "neondataskills@gmail.com",
Subject = "this is just a gmailr test")
test_email <- html_body(test_email, "Can <b>you</b> hear me now?")
create_draft(test_email)
ret_val <- send_message(test_email)
ret_val$status_code
